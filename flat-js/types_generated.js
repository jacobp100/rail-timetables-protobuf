// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @constructor
 */
function Stop() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Stop}
 */
Stop.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Stop=} obj
 * @returns {Stop}
 */
Stop.getRootAsStop = function(bb, obj) {
  return (obj || new Stop).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Stop.prototype.stationId = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Stop.prototype.arrivalTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Stop.prototype.departureTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Stop.prototype.platform = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Stop.startStop = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} stationId
 */
Stop.addStationId = function(builder, stationId) {
  builder.addFieldInt16(0, stationId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} arrivalTime
 */
Stop.addArrivalTime = function(builder, arrivalTime) {
  builder.addFieldInt16(1, arrivalTime, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} departureTime
 */
Stop.addDepartureTime = function(builder, departureTime) {
  builder.addFieldInt16(2, departureTime, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} platformOffset
 */
Stop.addPlatform = function(builder, platformOffset) {
  builder.addFieldOffset(3, platformOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Stop.endStop = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
function Route() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Route}
 */
Route.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Route=} obj
 * @returns {Route}
 */
Route.getRootAsRoute = function(bb, obj) {
  return (obj || new Route).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Route.prototype.routeId = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Route.prototype.operatingDays = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Route.prototype.dateFrom = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Route.prototype.dateTo = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {Stop=} obj
 * @returns {Stop}
 */
Route.prototype.stops = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new Stop).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Route.prototype.stopsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Route.startRoute = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} routeId
 */
Route.addRouteId = function(builder, routeId) {
  builder.addFieldInt16(0, routeId, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} operatingDays
 */
Route.addOperatingDays = function(builder, operatingDays) {
  builder.addFieldInt8(1, operatingDays, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dateFrom
 */
Route.addDateFrom = function(builder, dateFrom) {
  builder.addFieldInt16(2, dateFrom, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dateTo
 */
Route.addDateTo = function(builder, dateTo) {
  builder.addFieldInt16(3, dateTo, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stopsOffset
 */
Route.addStops = function(builder, stopsOffset) {
  builder.addFieldOffset(4, stopsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Route.createStopsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Route.startStopsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Route.endRoute = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
function Root() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
}

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Root}
 */
Root.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Root=} obj
 * @returns {Root}
 */
Root.getRootAsRoot = function(bb, obj) {
  return (obj || new Root).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {Route=} obj
 * @returns {Route}
 */
Root.prototype.routes = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Route).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Root.prototype.routesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Root.startRoot = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} routesOffset
 */
Root.addRoutes = function(builder, routesOffset) {
  builder.addFieldOffset(0, routesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Root.createRoutesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Root.startRoutesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Root.endRoot = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Root.finishRootBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.Stop = Stop;
this.Route = Route;
this.Root = Root;
