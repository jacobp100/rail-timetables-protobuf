/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.types.Data', null, global);
goog.exportSymbol('proto.types.Data.Route', null, global);
goog.exportSymbol('proto.types.Data.Route.Stop', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Data.repeatedFields_, null);
};
goog.inherits(proto.types.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Data.displayName = 'proto.types.Data';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Data.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.types.Data.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Data}
 */
proto.types.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Data;
  return proto.types.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Data}
 */
proto.types.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Data.Route;
      reader.readMessage(value,proto.types.Data.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.Data.Route.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Data.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Data.Route.repeatedFields_, null);
};
goog.inherits(proto.types.Data.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Data.Route.displayName = 'proto.types.Data.Route';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Data.Route.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Data.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Data.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Data.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatingdays: jspb.Message.getFieldWithDefault(msg, 2, 0),
    datefrom: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dateto: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stopsList: jspb.Message.toObjectList(msg.getStopsList(),
    proto.types.Data.Route.Stop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Data.Route}
 */
proto.types.Data.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Data.Route;
  return proto.types.Data.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Data.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Data.Route}
 */
proto.types.Data.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOperatingdays(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDatefrom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDateto(value);
      break;
    case 5:
      var value = new proto.types.Data.Route.Stop;
      reader.readMessage(value,proto.types.Data.Route.Stop.deserializeBinaryFromReader);
      msg.addStops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Data.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Data.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Data.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperatingdays();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDatefrom();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDateto();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getStopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.types.Data.Route.Stop.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Data.Route.Stop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Data.Route.Stop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.Data.Route.Stop.displayName = 'proto.types.Data.Route.Stop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Data.Route.Stop.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Data.Route.Stop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Data.Route.Stop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.Route.Stop.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arrivaltime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    departuretime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    platform: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Data.Route.Stop}
 */
proto.types.Data.Route.Stop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Data.Route.Stop;
  return proto.types.Data.Route.Stop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Data.Route.Stop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Data.Route.Stop}
 */
proto.types.Data.Route.Stop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStationid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArrivaltime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeparturetime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Data.Route.Stop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Data.Route.Stop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Data.Route.Stop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Data.Route.Stop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getArrivaltime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDeparturetime();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 stationId = 1;
 * @return {number}
 */
proto.types.Data.Route.Stop.prototype.getStationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.Data.Route.Stop.prototype.setStationid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 arrivalTime = 2;
 * @return {number}
 */
proto.types.Data.Route.Stop.prototype.getArrivaltime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.Data.Route.Stop.prototype.setArrivaltime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 departureTime = 3;
 * @return {number}
 */
proto.types.Data.Route.Stop.prototype.getDeparturetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.Data.Route.Stop.prototype.setDeparturetime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string platform = 4;
 * @return {string}
 */
proto.types.Data.Route.Stop.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.types.Data.Route.Stop.prototype.setPlatform = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.types.Data.Route.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.types.Data.Route.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 operatingDays = 2;
 * @return {number}
 */
proto.types.Data.Route.prototype.getOperatingdays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.Data.Route.prototype.setOperatingdays = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 dateFrom = 3;
 * @return {number}
 */
proto.types.Data.Route.prototype.getDatefrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.types.Data.Route.prototype.setDatefrom = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 dateTo = 4;
 * @return {number}
 */
proto.types.Data.Route.prototype.getDateto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.types.Data.Route.prototype.setDateto = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Stop stops = 5;
 * @return {!Array<!proto.types.Data.Route.Stop>}
 */
proto.types.Data.Route.prototype.getStopsList = function() {
  return /** @type{!Array<!proto.types.Data.Route.Stop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Data.Route.Stop, 5));
};


/** @param {!Array<!proto.types.Data.Route.Stop>} value */
proto.types.Data.Route.prototype.setStopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.types.Data.Route.Stop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Data.Route.Stop}
 */
proto.types.Data.Route.prototype.addStops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.types.Data.Route.Stop, opt_index);
};


proto.types.Data.Route.prototype.clearStopsList = function() {
  this.setStopsList([]);
};


/**
 * repeated Route routes = 1;
 * @return {!Array<!proto.types.Data.Route>}
 */
proto.types.Data.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.types.Data.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.Data.Route, 1));
};


/** @param {!Array<!proto.types.Data.Route>} value */
proto.types.Data.prototype.setRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.Data.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.Data.Route}
 */
proto.types.Data.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Data.Route, opt_index);
};


proto.types.Data.prototype.clearRoutesList = function() {
  this.setRoutesList([]);
};


goog.object.extend(exports, proto.types);
