// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TypesRoot_FileDescriptor

static GPBFileDescriptor *TypesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"types"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Data

@implementation Data

@dynamic routesArray, routesArray_Count;

typedef struct Data__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *routesArray;
} Data__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "routesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Data_Route),
        .number = Data_FieldNumber_RoutesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Data__storage_, routesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Data class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Data__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Data_Route

@implementation Data_Route

@dynamic routeId;
@dynamic operatingDays;
@dynamic dateFrom;
@dynamic dateTo;
@dynamic stopsArray, stopsArray_Count;

typedef struct Data_Route__storage_ {
  uint32_t _has_storage_[1];
  uint32_t routeId;
  uint32_t operatingDays;
  uint32_t dateFrom;
  uint32_t dateTo;
  NSMutableArray *stopsArray;
} Data_Route__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "routeId",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_FieldNumber_RouteId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Data_Route__storage_, routeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "operatingDays",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_FieldNumber_OperatingDays,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Data_Route__storage_, operatingDays),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dateFrom",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_FieldNumber_DateFrom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Data_Route__storage_, dateFrom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dateTo",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_FieldNumber_DateTo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Data_Route__storage_, dateTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "stopsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Data_Route_Stop),
        .number = Data_Route_FieldNumber_StopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Data_Route__storage_, stopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Data_Route class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Data_Route__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\r\000\003\010\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Data)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Data_Route_Stop

@implementation Data_Route_Stop

@dynamic stationId;
@dynamic arrivalTime;
@dynamic departureTime;
@dynamic platform;

typedef struct Data_Route_Stop__storage_ {
  uint32_t _has_storage_[1];
  uint32_t stationId;
  uint32_t arrivalTime;
  uint32_t departureTime;
  NSString *platform;
} Data_Route_Stop__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stationId",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_Stop_FieldNumber_StationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Data_Route_Stop__storage_, stationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "arrivalTime",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_Stop_FieldNumber_ArrivalTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Data_Route_Stop__storage_, arrivalTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "departureTime",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_Stop_FieldNumber_DepartureTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Data_Route_Stop__storage_, departureTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = Data_Route_Stop_FieldNumber_Platform,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Data_Route_Stop__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Data_Route_Stop class]
                                     rootClass:[TypesRoot class]
                                          file:TypesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Data_Route_Stop__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\013\000\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Data_Route)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
